{"version":3,"sources":["Buttons.jsx","SetCounterValue.js","Display.jsx","AppBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","onClick","disabled","children","SetCounterValue","className","action","type","step","value","state","startValue","onChange","onChangeStart","maxValue","onChangeMax","Display","counter","maxCounter","AppBox","onClickUp","buttonCount","onClickReset","buttonRes","App","buttonSet","setState","changeValue","event","console","log","currentTarget","Number","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAiBeA,G,KAbC,SAACC,GAChB,OACC,4BACCC,QAASD,EAAMC,QACfC,SAAUF,EAAME,UAEfF,EAAMG,YCsBKC,EA1BS,SAACJ,GAEvB,OACE,yBAAKK,UAAU,cACd,yBAAKA,UAAU,OACd,0BAAMC,OAAO,IACZ,2BAAOC,KAAK,SAASC,KAAK,IACtBC,MAAOT,EAAMU,MAAMC,WACvBC,SAAUZ,EAAMa,gBAChB,2BAAON,KAAK,SAASC,KAAK,IACtBC,MAAOT,EAAMU,MAAMI,SACvBF,SAAUZ,EAAMe,eAEjB,yBAAKV,UAAU,aACd,yBAAKA,UAAU,UACd,kBAAC,EAAD,iBCJOW,EAdC,SAAChB,GAEf,OACC,yBACCK,UAAWL,EAAMU,MAAMO,QAAUjB,EAAMU,MAAMQ,WAAa,UAAY,iBACtE,6BACElB,EAAMU,MAAMO,WCsBHE,EAzBA,SAACnB,GAGd,OACE,yBAAKK,UAAU,cACd,yBAAKA,UAAU,OAEd,kBAAC,EAAD,CAASK,MAAOV,EAAMU,QAEtB,yBAAKL,UAAU,aACd,yBAAKA,UAAU,UACd,kBAAC,EAAD,CAASK,MAAOV,EAAMU,MAAOT,QAASD,EAAMoB,UAAWlB,SAAUF,EAAMU,MAAMW,aAA7E,OAGA,kBAAC,EAAD,CAASX,MAAOV,EAAMU,MAAOT,QAASD,EAAMsB,aAAcpB,SAAUF,EAAMU,MAAMa,WAAhF,YCiDOC,E,2MA7Ddd,MAAQ,CACPO,QAAS,EACTC,WAAY,EACZG,aAAa,EACbE,WAAW,EACXE,WAAW,EACXd,WAAY,EACZG,SAAU,G,EAIXM,UAAY,WAEP,EAAKV,MAAMO,QAAU,EAAKP,MAAMQ,YACnC,EAAKQ,SAAS,CAACT,QAAS,EAAKP,MAAMO,QAAU,IAG1C,EAAKP,MAAMO,UAAY,EAAKP,MAAMQ,WAAa,GAClD,EAAKQ,SAAS,CAACL,aAAa,K,EAI9BC,aAAe,WACd,EAAKI,SAAS,CACZT,QAAS,EACTI,aAAa,K,EAKhBM,YAAc,a,EAIdd,cAAgB,SAACe,GAChBC,QAAQC,IAAIF,EAAMG,eAClB,EAAKL,SAAS,CAACf,WAAYqB,OAAOJ,EAAMG,cAActB,SACtD,WAAO,EAAKkB,kB,EAIbZ,YAAc,a,wEAMb,OACC,yBAAKV,UAAU,OACd,kBAAC,EAAD,CAAQK,MAAOuB,KAAKvB,MAClBU,UAAWa,KAAKb,UAChBE,aAAcW,KAAKX,eACrB,kBAAC,EAAD,CAAiBT,cAAeoB,KAAKpB,cAChCE,YAAakB,KAAKlB,YAClBL,MAAOuB,KAAKvB,a,GAxDHwB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f15833f7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nconst Buttons = (props) => {\n\treturn (\n\t\t<button\n\t\t\tonClick={props.onClick}\n\t\t\tdisabled={props.disabled}>\n\n\t\t\t{props.children}\n\n\t\t</button>\n\t)\n}\n\n\nexport default Buttons;\n","import React from 'react';\nimport './App.css';\nimport Buttons from \"./Buttons\";\n\n\n\nconst SetCounterValue = (props) => {\n\n\t\treturn (\n\t\t\t\t<div className=\"App-header\">\n\t\t\t\t\t<div className=\"box\">\n\t\t\t\t\t\t<form action=\"\">\n\t\t\t\t\t\t\t<input type=\"number\" step=\"1\"\n\t\t\t\t\t\t\t\t   value={props.state.startValue}\n\t\t\t\t\t\t\tonChange={props.onChangeStart}/>\n\t\t\t\t\t\t\t<input type=\"number\" step=\"1\"\n\t\t\t\t\t\t\t\t   value={props.state.maxValue}\n\t\t\t\t\t\t\tonChange={props.onChangeMax}/>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<div className=\"boxButton\">\n\t\t\t\t\t\t\t<div className=\"button\">\n\t\t\t\t\t\t\t\t<Buttons>\n\t\t\t\t\t\t\t\t\tSet\n\t\t\t\t\t\t\t\t</Buttons>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t)\n}\n\n\nexport default SetCounterValue;\n","import React from 'react';\nimport './App.css';\n\nconst Display = (props) => {\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={props.state.counter < props.state.maxCounter ? 'display' : 'maxValueClass'}>\n\t\t\t\t<div>\n\t\t\t\t\t{props.state.counter}\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t)\n\t};\n\n\nexport default Display;\n","import React from 'react';\nimport './App.css';\nimport Display from \"./Display\";\nimport Buttons from \"./Buttons\";\n\n\nconst AppBox = (props) => {\n\n\n\t\treturn (\n\t\t\t\t<div className=\"App-header\">\n\t\t\t\t\t<div className=\"box\">\n\n\t\t\t\t\t\t<Display state={props.state}/>\n\n\t\t\t\t\t\t<div className=\"boxButton\">\n\t\t\t\t\t\t\t<div className=\"button\">\n\t\t\t\t\t\t\t\t<Buttons state={props.state} onClick={props.onClickUp} disabled={props.state.buttonCount}>\n\t\t\t\t\t\t\t\t\tint\n\t\t\t\t\t\t\t\t</Buttons>\n\t\t\t\t\t\t\t\t<Buttons state={props.state} onClick={props.onClickReset} disabled={props.state.buttonRes}>\n\t\t\t\t\t\t\t\t\trst\n\t\t\t\t\t\t\t\t</Buttons>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t)\n};\n\n\nexport default AppBox;\n","import React from 'react';\nimport './App.css';\nimport SetCounterValue from \"./SetCounterValue\";\nimport AppBox from \"./AppBox\";\n\n\nclass App extends React.Component {\n\n\tstate = {\n\t\tcounter: 0,\n\t\tmaxCounter: 5,\n\t\tbuttonCount: false,\n\t\tbuttonRes: false,\n\t\tbuttonSet: false,\n\t\tstartValue: 0,\n\t\tmaxValue: 5\n\t};\n\n\n\tonClickUp = () => {\n\n\t\tif (this.state.counter < this.state.maxCounter) {\n\t\t\tthis.setState({counter: this.state.counter + 1}\n\t\t\t)\n\t\t}\n\t\tif (this.state.counter === this.state.maxCounter - 1) {\n\t\t\tthis.setState({buttonCount: true})\n\t\t}\n\t};\n\n\tonClickReset = () => {\n\t\tthis.setState({\n\t\t\t\tcounter: 0,\n\t\t\t\tbuttonCount: false\n\t\t\t}\n\t\t)\n\t};\n\n\tchangeValue = () => {\n\n\t};\n\n\tonChangeStart = (event) => {\n\t\tconsole.log(event.currentTarget)\n\t\tthis.setState({startValue: Number(event.currentTarget.value)},\n\t\t() => {this.changeValue()}\n\t\t)\n\t};\n\n\tonChangeMax = () => {\n\n\t};\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<AppBox state={this.state}\n\t\t\t\t\t\tonClickUp={this.onClickUp}\n\t\t\t\t\t\tonClickReset={this.onClickReset}/>\n\t\t\t\t<SetCounterValue onChangeStart={this.onChangeStart}\n\t\t\t\t\t\t\t\t onChangeMax={this.onChangeMax}\n\t\t\t\t\t\t\t\t state={this.state}/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}